{"version":3,"sources":["components/TodoListTemplate.js","actions/index.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["TodoListTemplate","form","children","className","process","api_url","Form","state","todo","handleChange","e","setState","target","value","handleCreate","props","addTodo","text","checked","console","log","handleKeyPress","key","this","onChange","onKeyPress","onClick","Component","connect","dispatch","axios","post","then","res","type","payload","data","catch","error","TodoItem","handleRemove","id","removeTodo","handleToggle","toggleTodo","nextProps","nextState","todoText","stopPropagation","delete","put","TodoItemList","fetchAllTodos","todos","todoList","map","get","App","Boolean","window","location","hostname","match","initialState","store","createStore","action","Object","assign","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gUAqBeA,G,MAlBU,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SAC7B,OACI,0BAAMC,UAAU,sBACZ,yBAAKA,UAAU,SAAf,+BACaC,2BADb,KAIA,6BAASD,UAAU,gBACdF,GAGL,6BAASE,UAAU,iBACbD,M,+BCNZG,EAAU,kCCFVC,E,4MACFC,MAAQ,CACJC,KAAM,I,EAGVC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVH,KAAME,EAAEE,OAAOC,S,EAIvBC,aAAe,WAAO,IACVN,EAAS,EAAKD,MAAdC,KAER,EAAKO,MAAMC,QAAQ,CAEfC,KAAOT,EACPU,SAAU,IAEd,EAAKP,SAAS,CACVH,KAAM,KAEVW,QAAQC,IAAI,EAAKb,MAAMC,O,EAE3Ba,eAAiB,SAACX,GACA,UAAVA,EAAEY,KACF,EAAKR,gB,uDAGH,IACEN,EAASe,KAAKhB,MAAdC,KACAC,EAA+Cc,KAA/Cd,aAAcK,EAAiCS,KAAjCT,aAAcO,EAAmBE,KAAnBF,eAEpC,OACI,yBAAKlB,UAAU,QACX,2BAAOU,MAAOL,EAAMgB,SAAUf,EAAcgB,WAAYJ,IACxD,yBAAKlB,UAAU,gBAAgBuB,QAASZ,GAAxC,qB,GApCGa,aA6CJC,cAAQ,KAAM,CAACZ,QDAP,SAACR,GACpB,OAAO,SAACqB,GACJC,IAAMC,KAAK1B,EAASG,GAEfwB,MAAK,SAAAC,GAEFJ,EAAS,CACLK,KAvDI,WAwDJC,QAAUF,EAAIG,UAGrBC,OAAM,SAAAC,GAEH,MADAnB,QAAQmB,MAAMA,GACRA,QCbPV,CAA0BtB,GC9CnCiC,G,kNAKFC,aAAe,SAACC,GAEZ,EAAK1B,MAAM2B,WAAWD,I,EAG1BE,aAAe,SAACnC,GACZ,EAAKO,MAAM6B,WAAWpC,I,oEAVJqC,EAAWC,GAC7B,OAAOvB,KAAKR,MAAMG,UAAY2B,EAAU3B,U,+BAYlC,IAAD,EAC4BK,KAAKR,MAA9BgC,EADH,EACGA,SAAU7B,EADb,EACaA,QAASuB,EADtB,EACsBA,GACpBD,EAA8BjB,KAA9BiB,aAAcG,EAAgBpB,KAAhBoB,aACjB,OACI,yBAAKxC,UAAU,YAAYuB,QAAU,WAGjC,IAAMlB,EAAO,CAACiC,KAAIxB,KAAK8B,EAAU7B,WACjCV,EAAKU,SAAWV,EAAKU,QACrByB,EAAanC,KAEb,yBAAKL,UAAU,SAASuB,QAAU,SAAChB,GAC/BA,EAAEsC,kBAEFR,EAAaC,KAHjB,QAOA,yBAAKtC,UAAS,oBAAee,GAAW,YACpC,6BAAM6B,IAIN7B,GAAY,yBAAKf,UAAU,cAAf,e,GArCbwB,cA4CRC,cAAQ,KAAM,CAACc,WFlBJ,SAACD,GACvB,OAAO,SAACZ,GACJC,IAAMmB,OAAN,UAAgB5C,EAAhB,YAA2BoC,IAEtBT,MAAK,SAAAC,GAEFJ,EAAS,CACLK,KAlCO,cAmCPC,QAAUF,EAAIG,UAGrBC,OAAM,SAAAC,GAEH,MADAnB,QAAQmB,MAAMA,GACRA,OEKoBM,WFrChB,SAACpC,GACvB,OAAO,SAACqB,GACJC,IAAMoB,IAAN,UAAa7C,EAAb,YAAwBG,EAAKiC,IAAMjC,GAE9BwB,MAAK,SAAAC,GAEFJ,EAAS,CACLK,KAdO,cAePC,QAAUF,EAAIG,UAGrBC,OAAM,SAAAC,GAEH,MADAnB,QAAQmB,MAAMA,GACRA,QEwBPV,CAAwCW,GC7CjDY,E,kLAKE5B,KAAKR,MAAMqC,kB,4CAIOP,EAAWC,GAE7B,OAAOvB,KAAKR,MAAMsC,QAAUR,EAAUQ,Q,+BAIhC,IAEAC,EADY/B,KAAKR,MAAfsC,MACeE,KAAI,gBAAEd,EAAF,EAAEA,GAAIxB,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,QAAZ,OACvB,kBAAC,EAAD,CAAUI,IAAKmB,EAAIA,GAAIA,EAAIvB,QAASA,EAAS6B,SAAU9B,OAEvD,OACI,6BACKqC,O,GAtBM3B,aAmCZC,eAPS,SAACrB,GACrB,MAAM,CACF8C,MAAO9C,EAAM8C,SAKmB,CAACD,cHgCZ,WACzB,OAAO,SAACvB,GACJC,IAAM0B,IAAInD,GAEL2B,MAAK,SAAAC,GAEFJ,EAAS,CACLK,KA5EO,cA6EPC,QAAUF,EAAIG,UAGrBC,OAAM,SAAAC,GAEH,MADAnB,QAAQmB,MAAMA,GACRA,QG7CPV,CAA0CuB,GCpB1CM,E,uKARX,OACE,kBAAC,EAAD,CAAkBxD,KAAM,kBAAC,EAAD,OACtB,kBAAC,EAAD,W,GALU0B,aCGE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCfAC,EAAe,CACjBV,MAAO,CAAC,CACJZ,GAAK,EACLxB,KAAO,GACPC,SAAQ,K,gBCIV8C,EAAQC,uBDCa,WAAkC,IAAjC1D,EAAgC,uDAAxBwD,EAAcG,EAAU,uCACxD,OAAOA,EAAOhC,MACV,INXmB,cMcf,OAAOiC,OAAOC,OAAO,GAAI7D,EAAO,CAAC8C,MAAQa,EAAO/B,UACpD,INdgB,WMehB,INdmB,cMenB,INdmB,cMef,OAAOgC,OAAOC,OAAO,GAAI7D,EAAO,CAAC8C,MAAQa,EAAO/B,UACpD,QACI,OAAO5B,KCZoB8D,8BAAoBC,0BAAgBC,OAE3EC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUV,MAAOA,GACb,kBAAC,EAAD,QAGRW,SAASC,eAAe,SFgHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd5C,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAM4C,c","file":"static/js/main.e78ddc47.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\nconst TodoListTemplate = ({form, children}) => {\r\n    return (\r\n        <main className=\"todo-list-template\">\r\n            <div className=\"title\">\r\n                오늘 할 일 ({process.env.REACT_APP_TITLE})\r\n            </div>\r\n      \r\n            <section className=\"form-wrapper\">\r\n                {form}\r\n            </section>\r\n            \r\n            <section className=\"todos-wrapper\"> \r\n                { children }\r\n            </section>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default TodoListTemplate;","import axios from 'axios';\n\n// Action type 정의\nexport const FETCH_TODOS = \"FETCH_TODOS\";\nexport const ADD_TODO = \"ADD_TODO\";\nexport const REMOVE_TODO = \"REMOVE_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\n\n// const api_url = `${process.env.REACT_APP_APIURL}`;\nconst api_url = 'http://localhost:4500/api/todos';\n// Action 생성함수 선언\n\n// 4. Todo 갱신\nexport const toggleTodo = (todo) =>{\n    return (dispatch) => {\n        axios.put(`${api_url}/${todo.id}`, todo)\n            // promise 리턴\n            .then(res => {\n                // reducer 에서 기존의 데이터와 합치는 작업 수행\n                dispatch({\n                    type : TOGGLE_TODO,\n                    payload : res.data\n                })\n            })\n            .catch(error =>{\n                console.error(error);\n                throw(error);\n            })\n    }\n}\n\n// 3. Todo 삭제\nexport const removeTodo = (id) =>{\n    return (dispatch) => {\n        axios.delete(`${api_url}/${id}`)\n            // promise 리턴\n            .then(res => {\n                // reducer 에서 기존의 데이터와 합치는 작업 수행\n                dispatch({\n                    type : REMOVE_TODO,\n                    payload : res.data\n                })\n            })\n            .catch(error =>{\n                console.error(error);\n                throw(error);\n            })\n    }\n}\n\n// Action 생성함수 선언\n// 2. Todo 등록\nexport const addTodo = (todo) =>{\n    return (dispatch) => {\n        axios.post(api_url, todo)\n            // promise 리턴\n            .then(res => {\n                // reducer 에서 기존의 데이터와 합치는 작업 수행\n                dispatch({\n                    type : ADD_TODO,\n                    payload : res.data\n                })\n            })\n            .catch(error =>{\n                console.error(error);\n                throw(error);\n            })\n    }\n}\n\n// 1. Todo 목록\n// redux-thunk 사용\nexport const fetchAllTodos = () =>{\n    return (dispatch) => {\n        axios.get(api_url)\n            // promise 리턴\n            .then(res => {\n                // reducer 에서 기존의 데이터와 합치는 작업 수행\n                dispatch({\n                    type : FETCH_TODOS,\n                    payload : res.data\n                })\n            })\n            .catch(error =>{\n                console.error(error);\n                throw(error);\n            })\n    }\n}","import React, { Component } from 'react';\r\nimport './Form.css';\r\nimport { connect } from 'react-redux';\r\nimport { addTodo } from '../actions';\r\n\r\n\r\n\r\nclass Form extends Component {\r\n    state = {\r\n        todo: ''\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            todo: e.target.value\r\n        })\r\n    }\r\n    // 수정\r\n    handleCreate = () => {\r\n        const { todo } = this.state;\r\n        // Action 생성 함수 호출\r\n        this.props.addTodo({\r\n            // todo 객체 주기\r\n            text : todo,\r\n            checked : false\r\n        });\r\n        this.setState({\r\n            todo: '',\r\n        });\r\n        console.log(this.state.todo);\r\n    }\r\n    handleKeyPress = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.handleCreate();\r\n        }\r\n    }\r\n    render() {\r\n        const { todo } = this.state;\r\n        const { handleChange, handleCreate, handleKeyPress } = this;\r\n\r\n        return (\r\n            <div className=\"form\">\r\n                <input value={todo} onChange={handleChange} onKeyPress={handleKeyPress} />\r\n                <div className=\"create-button\" onClick={handleCreate}>\r\n                    추가\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// 받을 거 없이 전달만 하면 됨 => mapStateToProps 필요 없음\r\nexport default connect(null, {addTodo} )(Form)","import React, { Component } from 'react';\r\nimport './TodoItem.css';\r\nimport { removeTodo, toggleTodo } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass TodoItem extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n\r\n    handleRemove = (id) =>{\r\n        // Action 생성 함수 호출\r\n        this.props.removeTodo(id);\r\n    };\r\n\r\n    handleToggle = (todo) =>{\r\n        this.props.toggleTodo(todo);\r\n    }\r\n    \r\n    render() {\r\n        const { todoText, checked, id} = this.props;\r\n        const {handleRemove, handleToggle} = this;\r\n            return (\r\n                <div className=\"todo-item\" onClick={ () => {\r\n                    // id랑 text, checked 이용해서 새로운 객체 생성\r\n                    // 나머지는 키가 동일해서 생략 가능하지만 todoText는 text 이므로 따로 지정을 해줘야 함\r\n                    const todo = {id, text:todoText, checked};\r\n                    todo.checked = !todo.checked;\r\n                    handleToggle(todo); \r\n                }}>\r\n                    <div className=\"remove\" onClick={ (e) => {\r\n                        e.stopPropagation(); \r\n                        // onToggle 이 실행되지 않도록 함, bubble up(event 전파) 방지 되기 위함.\r\n                        handleRemove(id)}\r\n                        }>&times;\r\n                    </div>\r\n                    \r\n                    <div className={`todo-text ${checked && 'checked'}`}>\r\n                        <div>{todoText}</div>\r\n                    </div>\r\n                    \r\n                    {\r\n                        checked && (<div className=\"check-mark\">✓</div>)\r\n                    }\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(null, {removeTodo, toggleTodo})(TodoItem);","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport { connect } from 'react-redux';\r\nimport { fetchAllTodos } from '../actions';\r\n\r\nclass TodoItemList extends Component {\r\n    // life-cycle method : 화면 load 될때 호출 됨\r\n    componentDidMount(){\r\n        // 액션이 자동으로 주입이 됨\r\n        // 화면이 뜨자마자 서버랑 통신해서 데이터 가져와서 뿌려줌\r\n        this.props.fetchAllTodos();\r\n    }\r\n\r\n    // life-cycle 메서드 overriding : render() 메서드의 호출을 줄일 수 있다.\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // 현재의 값과 다음번의 값이 같지 않을경우 다시 그림\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { todos } = this.props;\r\n        const todoList = todos.map(({id, text, checked}) => (\r\n            <TodoItem key={id} id={id} checked={checked} todoText={text} />\r\n        ));\r\n            return (\r\n                <div>\r\n                    {todoList}\r\n                </div>\r\n            );\r\n    }\r\n}\r\n// store의 값이 바뀌면 자동으로 바뀌도록 연결 (subscribe)\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        todos: state.todos\r\n    }\r\n}\r\n// TodoItemList 컴포넌트와 fetchAllTodos 액션함수 연결\r\n// 메소드가 하나니까 굳이 mapDispatchToProps 사용하지 않고 바로 넣음\r\nexport default connect(mapStateToProps, {fetchAllTodos})(TodoItemList);","import React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\n\n// const initialTodos = new Array(500).fill(0).map(\n//   (item, idx) => ({ id: idx, text: `일정 ${idx}`, checked: true }) \n// );\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <TodoListTemplate form={<Form/>}>\n        <TodoItemList />\n      </TodoListTemplate>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FETCH_TODOS, ADD_TODO, REMOVE_TODO, TOGGLE_TODO } from '../actions';\n\n\nconst initialState = {\n    todos :[{\n        id : 0,\n        text : '',\n        checked:false\n    }]\n}\n\n// reducer 함수\nexport const todoReducer = (state = initialState, action) =>{\n    switch(action.type){\n        case FETCH_TODOS:\n            // 서버에서 가져온 데이터를 기존의 데이터(state)에 합쳐줌 Object.assign() 이용\n            // 매번 할때마다 리턴 할 필요 없이 사용\n            return Object.assign({}, state, {todos : action.payload});\n        case ADD_TODO:\n        case REMOVE_TODO:\n        case TOGGLE_TODO:\n            return Object.assign({}, state, {todos : action.payload});\n        default :\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { todoReducer } from './reducers';\nimport thunk from 'redux-thunk';\nimport {Provider} from 'react-redux';\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\nconst store = createStore(todoReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}